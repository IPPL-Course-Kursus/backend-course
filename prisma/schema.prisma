// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  uid String @unique
  fullName String @db.VarChar(100)
  image String?
  phoneNumber String @db.VarChar(15)
  role RoleType
  tanggalLahir  DateTime
  city String
  isDeleted DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction Transaction[]
  course Course[]
  courseUser CourseUser[]

  @@map("users")
}

model Course {
  id String @id @default(uuid())
  categoryId Int 
  userId String 
  courseLevelId Int 
  typeCourseId Int 
  courseCode String @unique
  courseName String
  image String
  aboutCourse String
  intendedFor String
  courseDiscountPercent Int @default(0)
  coursePrice Float @default(0)
  courseDiscountPrice Float @default(0)
  promoStatus Boolean @default(false) 
  publish Publish
  totalDuration Float @default(0)
  certificateStatus Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters Chapter[]
  courseUser CourseUser[]
  transaction Transaction[]
  category Category @relation(fields: [categoryId], references: [id])
  user User @relation(fields: [userId], references: [uid])
  courseLevel CourseLevel @relation(fields: [courseLevelId], references: [id])
  typeCourse TypeCourse @relation(fields: [typeCourseId], references: [id])

  @@map("course")
}

model Category {
  id Int @id @default(autoincrement())
  categoryName String
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course Course[]

  @@map("categories")
}

model CourseLevel {
  id Int @id @default(autoincrement())
  levelName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course Course[]

  @@map("course_levels")
}

model TypeCourse {
  id Int @id @default(autoincrement())
  typeName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course Course[]

  @@map("type_courses")
}

model Chapter {
  id String @id @default(uuid())
  sort Int 
  courseId String 
  chapterTitle String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contents Content[]

  course Course @relation(fields: [courseId], references: [id])

  @@map("chapters")
}

model Content {
  id String @id @default(uuid())
  sort Int
  chapterId String
  interpreterId Int? 
  contentTitle String
  contentUrl String
  duration Int
  teks String
  interpreterStatus Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userContentProgress UserContentProgress[]
  chapter Chapter @relation(fields: [chapterId], references: [id])
  interpreter Interpreter? @relation(fields: [interpreterId], references: [id])


  @@map("contents")
}

model Interpreter {
  id Int @id @default(autoincrement())
  languageInterpreterId Int
  sourceCode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content Content[]

  interpreterLanguage InterpreterLanguage @relation(fields: [languageInterpreterId], references: [id])

  @@map("interpreters")
}

model CourseUser {
  id String @id @default(uuid())
  userId String
  courseId String 
  contentFinish Float @default(0)
  courseStatus CourseStatus @default(NotStarted)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userContentProgress UserContentProgress[]
  certificate Certificate[]

  user User @relation(fields: [userId], references: [uid])
  course Course @relation(fields: [courseId], references: [id])

  @@map("course_users")
}

model UserContentProgress {
  id              Int      @id @default(autoincrement())
  courseUserId   String  
  contentId      String     
  contentStatus   Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  courseUser     CourseUser @relation(fields: [courseUserId], references: [id])
  content        Content     @relation(fields: [contentId], references: [id])

  @@map("user_content_progress")
}

model Certificate {
  id Int @id @default(autoincrement())
  courseUserId String @unique
  fullName String
  certificateNumber String
  issueDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseUser CourseUser @relation(fields: [courseUserId], references: [id])

  @@map("certificates")
}

model Transaction {
  id Int @id @default(autoincrement())
  userId String 
  courseId String 
  courseName String
  orderId String @unique
  ppn Float
  price Float
  totalPrice Float
  paymentStatus PaymentStatus
  paymentMethod String
  linkPayment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [uid])
  course Course @relation(fields: [courseId], references: [id])

  @@map("transactions")
}

model InterpreterLanguage {
  id Int @id @default(autoincrement())
  languageInterpreter String
  version String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interpreter Interpreter[]

  @@map("interpreter_languages")
}

enum RoleType {
  User
  Instruktur
  Admin
}

enum Publish {
  Published
  Archived
}

enum CourseStatus {
  NotStarted
  InProgress
  Completed
}

enum PaymentStatus {
  pending
  success
  failure
  expire
  cancel
  deny
  settlement
  capture
}